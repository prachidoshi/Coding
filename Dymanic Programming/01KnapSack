package DynamicProgramming;

public class Knapsack_01 {
    public static void main(String[] args){
        int val[] = new int[] { 60, 100, 120 };
        int wt[] = new int[] { 10, 20, 30 };
        int W = 50;
        int n = val.length;
       // System.out.println(knapSack(W, wt, val, n));
        System.out.println(knapSackDP(W, wt, val, n));
    }

    /*
    Using Recursion
     */
    public static int knapSack(int W, int[] wt,int[] val, int n){

        //base case
        if(n == 0 || W == 0){
            return 0;
        }

        //out of bound case
        if(wt[n-1] > W){
            return knapSack(W,wt,val,n-1);
        }

        return Math.max((val[n-1]+knapSack(W-wt[n-1],wt,val,n-1)),knapSack(W,wt,val,n-1));
    }
    /*
    Using recursion with memoization
     */

    /*
    DP
     */
   public static int knapSackDP(int W, int[] wt,int[] val, int n){

       int[][] dp = new int[n+1][W+1];

       for(int i=0;i<=n;i++){
           for(int w=0;w<=W;w++){
               if(i == 0 || w == 0){
                   dp[i][w] = 0;
               } else if (wt[i-1]<=w){
                   dp[i][w] = Math.max((val[i-1]+dp[i-1][w-wt[i-1]]),(dp[i-1][w]));
               }else {
                   dp[i][w] = dp[i - 1][w];
               }
           }
       }
       return dp[n][W];
   }
}
