package DynamicProgramming;
/*
Given a set of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum.
Example:

Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 9
Output: True
There is a subset (4, 5) with sum 9.

Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 30
Output: False
There is no subset that add up to 30.
 */
public class SubsetSum {
    public static void main(String args[])
    {
        int set[] = { 3, 34, 4, 12, 5, 2 };
        int sum = 9;
        int n = set.length;
        /*if (isSubsetSum(set, n, sum) == true)
            System.out.println("Found a subset"
                    + " with given sum");
        else
            System.out.println("No subset with"
                    + " given sum");

         */
        if (isSubsetSumDP(set, n, sum) == true)
            System.out.println("Found a subset"
                    + " with given sum");
        else
            System.out.println("No subset with"
                    + " given sum");
    }
    /*
    Using recursion
     */
    public static boolean isSubsetSum(int[] set, int n,int sum){
        //base case
        if(sum == 0) return true;
        if(sum!=0 && n == 0) return false;

        if(set[n-1]>sum) return isSubsetSum(set,n-1,sum);

        return isSubsetSum(set,n-1,sum-set[n-1]) || isSubsetSum(set,n-1,sum);
    }

    /*
if (A[i] > j)
DP[i][j] = DP[i-1][j]
else
DP[i][j] = DP[i-1][j] OR DP[i-1][sum-A[i]]
This means that if current element has value greater than ‘current sum value’ we will copy the answer for previous cases
And if the current sum value is greater than the ‘ith’ element we will see if any of previous states have already experienced the sum=’j’ OR any previous states experienced a value ‘j – A[i]’ which will solve our purpose.
     */
    public static boolean isSubsetSumDP(int[] set, int n, int sum){
        boolean subset[][] = new boolean[n+1][sum+1];

        //base case if sum = 0 , answer is true
        for(int i=0;i<=n;i++){
            subset[i][0] = true;
        }


        // If sum is not 0 and set is empty,then answer is false
        for(int j=1;j<=sum;j++){
            subset[0][j] = false;
        }

        for(int i=1;i<=n;i++){
            for(int j=1;j<=sum;j++){
                if(set[i-1]>j){
                    subset[i][j] = subset[i-1][j];
                }else {
                    subset[i][j] = subset[i - 1][j] || subset[i - 1][j - set[i-1]];
                }
            }
        }
        return subset[n][sum];
    }
}
